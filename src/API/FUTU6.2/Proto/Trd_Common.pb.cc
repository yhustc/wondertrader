// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trd_Common.proto

#include "Trd_Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Trd_Common {
class AccCashInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccCashInfo>
      _instance;
} _AccCashInfo_default_instance_;
class TrdHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrdHeader>
      _instance;
} _TrdHeader_default_instance_;
class TrdAccDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrdAcc>
      _instance;
} _TrdAcc_default_instance_;
class FundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Funds>
      _instance;
} _Funds_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Order>
      _instance;
} _Order_default_instance_;
class OrderFillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderFill>
      _instance;
} _OrderFill_default_instance_;
class MaxTrdQtysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaxTrdQtys>
      _instance;
} _MaxTrdQtys_default_instance_;
class TrdFilterConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrdFilterConditions>
      _instance;
} _TrdFilterConditions_default_instance_;
}  // namespace Trd_Common
namespace protobuf_Trd_5fCommon_2eproto {
void InitDefaultsAccCashInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_AccCashInfo_default_instance_;
    new (ptr) ::Trd_Common::AccCashInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::AccCashInfo::InitAsDefaultInstance();
}

void InitDefaultsAccCashInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccCashInfoImpl);
}

void InitDefaultsTrdHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_TrdHeader_default_instance_;
    new (ptr) ::Trd_Common::TrdHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::TrdHeader::InitAsDefaultInstance();
}

void InitDefaultsTrdHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrdHeaderImpl);
}

void InitDefaultsTrdAccImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_TrdAcc_default_instance_;
    new (ptr) ::Trd_Common::TrdAcc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::TrdAcc::InitAsDefaultInstance();
}

void InitDefaultsTrdAcc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrdAccImpl);
}

void InitDefaultsFundsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Trd_5fCommon_2eproto::InitDefaultsAccCashInfo();
  {
    void* ptr = &::Trd_Common::_Funds_default_instance_;
    new (ptr) ::Trd_Common::Funds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::Funds::InitAsDefaultInstance();
}

void InitDefaultsFunds() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFundsImpl);
}

void InitDefaultsPositionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_Position_default_instance_;
    new (ptr) ::Trd_Common::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::Position::InitAsDefaultInstance();
}

void InitDefaultsPosition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPositionImpl);
}

void InitDefaultsOrderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_Order_default_instance_;
    new (ptr) ::Trd_Common::Order();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::Order::InitAsDefaultInstance();
}

void InitDefaultsOrder() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOrderImpl);
}

void InitDefaultsOrderFillImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_OrderFill_default_instance_;
    new (ptr) ::Trd_Common::OrderFill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::OrderFill::InitAsDefaultInstance();
}

void InitDefaultsOrderFill() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOrderFillImpl);
}

void InitDefaultsMaxTrdQtysImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_MaxTrdQtys_default_instance_;
    new (ptr) ::Trd_Common::MaxTrdQtys();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::MaxTrdQtys::InitAsDefaultInstance();
}

void InitDefaultsMaxTrdQtys() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMaxTrdQtysImpl);
}

void InitDefaultsTrdFilterConditionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Trd_Common::_TrdFilterConditions_default_instance_;
    new (ptr) ::Trd_Common::TrdFilterConditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trd_Common::TrdFilterConditions::InitAsDefaultInstance();
}

void InitDefaultsTrdFilterConditions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrdFilterConditionsImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[19];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::AccCashInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::AccCashInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::AccCashInfo, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::AccCashInfo, cash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::AccCashInfo, availablebalance_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdHeader, trdenv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdHeader, accid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdHeader, trdmarket_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, trdenv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, accid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, trdmarketauthlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, acctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, cardnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, securityfirm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdAcc, simacctype_),
  2,
  1,
  ~0u,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, totalassets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, cash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, marketval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, frozencash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, debtcash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, avlwithdrawalcash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, availablefunds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, unrealizedpl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, realizedpl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, risklevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, initialmargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, maintenancemargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, cashinfolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, maxpowershort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, netcashpower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, longmv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, shortmv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, pendingasset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, maxwithdrawal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, riskstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, margincallmargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, ispdt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, pdtseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, beginningdtbp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, remainingdtbp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, dtcallamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Funds, dtstatus_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  8,
  9,
  12,
  11,
  13,
  14,
  ~0u,
  15,
  16,
  17,
  18,
  19,
  20,
  22,
  21,
  23,
  0,
  24,
  25,
  26,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, positionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, positionside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, cansellqty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, costprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, plval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, plratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, secmarket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, td_plval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, td_trdval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, td_buyval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, td_buyqty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, td_sellval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, td_sellqty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, unrealizedpl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, realizedpl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Position, trdmarket_),
  2,
  6,
  0,
  1,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  7,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, trdside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, orderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, orderidex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, fillqty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, fillavgprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, lasterrmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, secmarket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, createtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, updatetimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, filloutsiderth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, auxprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, trailtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, trailvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, trailspread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::Order, trdmarket_),
  7,
  8,
  12,
  9,
  0,
  1,
  2,
  10,
  11,
  3,
  4,
  14,
  15,
  5,
  13,
  16,
  17,
  6,
  18,
  19,
  20,
  22,
  21,
  24,
  23,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, trdside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, fillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, fillidex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, orderidex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, counterbrokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, counterbrokername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, secmarket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, createtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, updatetimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::OrderFill, status_),
  8,
  6,
  0,
  7,
  1,
  2,
  3,
  10,
  11,
  4,
  9,
  5,
  13,
  12,
  15,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, maxcashbuy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, maxcashandmarginbuy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, maxpositionsell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, maxsellshort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, maxbuyback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, longrequiredim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::MaxTrdQtys, shortrequiredim_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdFilterConditions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdFilterConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdFilterConditions, codelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdFilterConditions, idlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdFilterConditions, begintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Trd_Common::TrdFilterConditions, endtime_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Trd_Common::AccCashInfo)},
  { 11, 19, sizeof(::Trd_Common::TrdHeader)},
  { 22, 34, sizeof(::Trd_Common::TrdAcc)},
  { 41, 75, sizeof(::Trd_Common::Funds)},
  { 104, 131, sizeof(::Trd_Common::Position)},
  { 153, 184, sizeof(::Trd_Common::Order)},
  { 210, 231, sizeof(::Trd_Common::OrderFill)},
  { 247, 259, sizeof(::Trd_Common::MaxTrdQtys)},
  { 266, 275, sizeof(::Trd_Common::TrdFilterConditions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_AccCashInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_TrdHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_TrdAcc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_Funds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_Order_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_OrderFill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_MaxTrdQtys_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Trd_Common::_TrdFilterConditions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Trd_Common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020Trd_Common.proto\022\nTrd_Common\032\014Common.p"
      "roto\"G\n\013AccCashInfo\022\020\n\010currency\030\001 \001(\005\022\014\n"
      "\004cash\030\002 \001(\001\022\030\n\020availableBalance\030\003 \001(\001\"=\n"
      "\tTrdHeader\022\016\n\006trdEnv\030\001 \002(\005\022\r\n\005accID\030\002 \002("
      "\004\022\021\n\ttrdMarket\030\003 \002(\005\"\216\001\n\006TrdAcc\022\016\n\006trdEn"
      "v\030\001 \002(\005\022\r\n\005accID\030\002 \002(\004\022\031\n\021trdMarketAuthL"
      "ist\030\003 \003(\005\022\017\n\007accType\030\004 \001(\005\022\017\n\007cardNum\030\005 "
      "\001(\t\022\024\n\014securityFirm\030\006 \001(\005\022\022\n\nsimAccType\030"
      "\007 \001(\005\"\363\004\n\005Funds\022\r\n\005power\030\001 \002(\001\022\023\n\013totalA"
      "ssets\030\002 \002(\001\022\014\n\004cash\030\003 \002(\001\022\021\n\tmarketVal\030\004"
      " \002(\001\022\022\n\nfrozenCash\030\005 \002(\001\022\020\n\010debtCash\030\006 \002"
      "(\001\022\031\n\021avlWithdrawalCash\030\007 \002(\001\022\020\n\010currenc"
      "y\030\010 \001(\005\022\026\n\016availableFunds\030\t \001(\001\022\024\n\014unrea"
      "lizedPL\030\n \001(\001\022\022\n\nrealizedPL\030\013 \001(\001\022\021\n\tris"
      "kLevel\030\014 \001(\005\022\025\n\rinitialMargin\030\r \001(\001\022\031\n\021m"
      "aintenanceMargin\030\016 \001(\001\022-\n\014cashInfoList\030\017"
      " \003(\0132\027.Trd_Common.AccCashInfo\022\025\n\rmaxPowe"
      "rShort\030\020 \001(\001\022\024\n\014netCashPower\030\021 \001(\001\022\016\n\006lo"
      "ngMv\030\022 \001(\001\022\017\n\007shortMv\030\023 \001(\001\022\024\n\014pendingAs"
      "set\030\024 \001(\001\022\025\n\rmaxWithdrawal\030\025 \001(\001\022\022\n\nrisk"
      "Status\030\026 \001(\005\022\030\n\020marginCallMargin\030\027 \001(\001\022\r"
      "\n\005isPdt\030\030 \001(\010\022\016\n\006pdtSeq\030\031 \001(\t\022\025\n\rbeginni"
      "ngDTBP\030\032 \001(\001\022\025\n\rremainingDTBP\030\033 \001(\001\022\024\n\014d"
      "tCallAmount\030\034 \001(\001\022\020\n\010dtStatus\030\035 \001(\005\"\225\003\n\010"
      "Position\022\022\n\npositionID\030\001 \002(\004\022\024\n\014position"
      "Side\030\002 \002(\005\022\014\n\004code\030\003 \002(\t\022\014\n\004name\030\004 \002(\t\022\013"
      "\n\003qty\030\005 \002(\001\022\022\n\ncanSellQty\030\006 \002(\001\022\r\n\005price"
      "\030\007 \002(\001\022\021\n\tcostPrice\030\010 \001(\001\022\013\n\003val\030\t \002(\001\022\r"
      "\n\005plVal\030\n \002(\001\022\017\n\007plRatio\030\013 \001(\001\022\021\n\tsecMar"
      "ket\030\014 \001(\005\022\020\n\010td_plVal\030\025 \001(\001\022\021\n\ttd_trdVal"
      "\030\026 \001(\001\022\021\n\ttd_buyVal\030\027 \001(\001\022\021\n\ttd_buyQty\030\030"
      " \001(\001\022\022\n\ntd_sellVal\030\031 \001(\001\022\022\n\ntd_sellQty\030\032"
      " \001(\001\022\024\n\014unrealizedPL\030\034 \001(\001\022\022\n\nrealizedPL"
      "\030\035 \001(\001\022\020\n\010currency\030\036 \001(\005\022\021\n\ttrdMarket\030\037 "
      "\001(\005\"\364\003\n\005Order\022\017\n\007trdSide\030\001 \002(\005\022\021\n\torderT"
      "ype\030\002 \002(\005\022\023\n\013orderStatus\030\003 \002(\005\022\017\n\007orderI"
      "D\030\004 \002(\004\022\021\n\torderIDEx\030\005 \002(\t\022\014\n\004code\030\006 \002(\t"
      "\022\014\n\004name\030\007 \002(\t\022\013\n\003qty\030\010 \002(\001\022\r\n\005price\030\t \001"
      "(\001\022\022\n\ncreateTime\030\n \002(\t\022\022\n\nupdateTime\030\013 \002"
      "(\t\022\017\n\007fillQty\030\014 \001(\001\022\024\n\014fillAvgPrice\030\r \001("
      "\001\022\022\n\nlastErrMsg\030\016 \001(\t\022\021\n\tsecMarket\030\017 \001(\005"
      "\022\027\n\017createTimestamp\030\020 \001(\001\022\027\n\017updateTimes"
      "tamp\030\021 \001(\001\022\016\n\006remark\030\022 \001(\t\022\023\n\013timeInForc"
      "e\030\023 \001(\005\022\026\n\016fillOutsideRTH\030\024 \001(\010\022\020\n\010auxPr"
      "ice\030\025 \001(\001\022\021\n\ttrailType\030\026 \001(\005\022\022\n\ntrailVal"
      "ue\030\027 \001(\001\022\023\n\013trailSpread\030\030 \001(\001\022\020\n\010currenc"
      "y\030\031 \001(\005\022\021\n\ttrdMarket\030\032 \001(\005\"\267\002\n\tOrderFill"
      "\022\017\n\007trdSide\030\001 \002(\005\022\016\n\006fillID\030\002 \002(\004\022\020\n\010fil"
      "lIDEx\030\003 \002(\t\022\017\n\007orderID\030\004 \001(\004\022\021\n\torderIDE"
      "x\030\005 \001(\t\022\014\n\004code\030\006 \002(\t\022\014\n\004name\030\007 \002(\t\022\013\n\003q"
      "ty\030\010 \002(\001\022\r\n\005price\030\t \002(\001\022\022\n\ncreateTime\030\n "
      "\002(\t\022\027\n\017counterBrokerID\030\013 \001(\005\022\031\n\021counterB"
      "rokerName\030\014 \001(\t\022\021\n\tsecMarket\030\r \001(\005\022\027\n\017cr"
      "eateTimestamp\030\016 \001(\001\022\027\n\017updateTimestamp\030\017"
      " \001(\001\022\016\n\006status\030\020 \001(\005\"\261\001\n\nMaxTrdQtys\022\022\n\nm"
      "axCashBuy\030\001 \002(\001\022\033\n\023maxCashAndMarginBuy\030\002"
      " \001(\001\022\027\n\017maxPositionSell\030\003 \002(\001\022\024\n\014maxSell"
      "Short\030\004 \001(\001\022\022\n\nmaxBuyBack\030\005 \001(\001\022\026\n\016longR"
      "equiredIM\030\006 \001(\001\022\027\n\017shortRequiredIM\030\007 \001(\001"
      "\"[\n\023TrdFilterConditions\022\020\n\010codeList\030\001 \003("
      "\t\022\016\n\006idList\030\002 \003(\004\022\021\n\tbeginTime\030\003 \001(\t\022\017\n\007"
      "endTime\030\004 \001(\t*.\n\006TrdEnv\022\023\n\017TrdEnv_Simula"
      "te\020\000\022\017\n\013TrdEnv_Real\020\001*X\n\013TrdCategory\022\027\n\023"
      "TrdCategory_Unknown\020\000\022\030\n\024TrdCategory_Sec"
      "urity\020\001\022\026\n\022TrdCategory_Future\020\002*\225\001\n\tTrdM"
      "arket\022\025\n\021TrdMarket_Unknown\020\000\022\020\n\014TrdMarke"
      "t_HK\020\001\022\020\n\014TrdMarket_US\020\002\022\020\n\014TrdMarket_CN"
      "\020\003\022\022\n\016TrdMarket_HKCC\020\004\022\025\n\021TrdMarket_Futu"
      "res\020\005\022\020\n\014TrdMarket_SG\020\006*\254\001\n\014TrdSecMarket"
      "\022\030\n\024TrdSecMarket_Unknown\020\000\022\023\n\017TrdSecMark"
      "et_HK\020\001\022\023\n\017TrdSecMarket_US\020\002\022\026\n\022TrdSecMa"
      "rket_CN_SH\020\037\022\026\n\022TrdSecMarket_CN_SZ\020 \022\023\n\017"
      "TrdSecMarket_SG\020)\022\023\n\017TrdSecMarket_JP\0203*m"
      "\n\007TrdSide\022\023\n\017TrdSide_Unknown\020\000\022\017\n\013TrdSid"
      "e_Buy\020\001\022\020\n\014TrdSide_Sell\020\002\022\025\n\021TrdSide_Sel"
      "lShort\020\003\022\023\n\017TrdSide_BuyBack\020\004*\201\003\n\tOrderT"
      "ype\022\025\n\021OrderType_Unknown\020\000\022\024\n\020OrderType_"
      "Normal\020\001\022\024\n\020OrderType_Market\020\002\022\033\n\027OrderT"
      "ype_AbsoluteLimit\020\005\022\025\n\021OrderType_Auction"
      "\020\006\022\032\n\026OrderType_AuctionLimit\020\007\022\032\n\026OrderT"
      "ype_SpecialLimit\020\010\022\036\n\032OrderType_SpecialL"
      "imit_All\020\t\022\022\n\016OrderType_Stop\020\n\022\027\n\023OrderT"
      "ype_StopLimit\020\013\022\035\n\031OrderType_MarketifTou"
      "ched\020\014\022\034\n\030OrderType_LimitifTouched\020\r\022\032\n\026"
      "OrderType_TrailingStop\020\016\022\037\n\033OrderType_Tr"
      "ailingStopLimit\020\017*M\n\tTrailType\022\025\n\021TrailT"
      "ype_Unknown\020\000\022\023\n\017TrailType_Ratio\020\001\022\024\n\020Tr"
      "ailType_Amount\020\002*\374\003\n\013OrderStatus\022\033\n\027Orde"
      "rStatus_Unsubmitted\020\000\022 \n\023OrderStatus_Unk"
      "nown\020\377\377\377\377\377\377\377\377\377\001\022\035\n\031OrderStatus_WaitingSu"
      "bmit\020\001\022\032\n\026OrderStatus_Submitting\020\002\022\034\n\030Or"
      "derStatus_SubmitFailed\020\003\022\027\n\023OrderStatus_"
      "TimeOut\020\004\022\031\n\025OrderStatus_Submitted\020\005\022\033\n\027"
      "OrderStatus_Filled_Part\020\n\022\032\n\026OrderStatus"
      "_Filled_All\020\013\022\037\n\033OrderStatus_Cancelling_"
      "Part\020\014\022\036\n\032OrderStatus_Cancelling_All\020\r\022\036"
      "\n\032OrderStatus_Cancelled_Part\020\016\022\035\n\031OrderS"
      "tatus_Cancelled_All\020\017\022\026\n\022OrderStatus_Fai"
      "led\020\025\022\030\n\024OrderStatus_Disabled\020\026\022\027\n\023Order"
      "Status_Deleted\020\027\022\035\n\031OrderStatus_FillCanc"
      "elled\020\030*e\n\017OrderFillStatus\022\026\n\022OrderFillS"
      "tatus_OK\020\000\022\035\n\031OrderFillStatus_Cancelled\020"
      "\001\022\033\n\027OrderFillStatus_Changed\020\002*`\n\014Positi"
      "onSide\022\025\n\021PositionSide_Long\020\000\022!\n\024Positio"
      "nSide_Unknown\020\377\377\377\377\377\377\377\377\377\001\022\026\n\022PositionSide"
      "_Short\020\001*\255\001\n\rModifyOrderOp\022\031\n\025ModifyOrde"
      "rOp_Unknown\020\000\022\030\n\024ModifyOrderOp_Normal\020\001\022"
      "\030\n\024ModifyOrderOp_Cancel\020\002\022\031\n\025ModifyOrder"
      "Op_Disable\020\003\022\030\n\024ModifyOrderOp_Enable\020\004\022\030"
      "\n\024ModifyOrderOp_Delete\020\005*P\n\nTrdAccType\022\026"
      "\n\022TrdAccType_Unknown\020\000\022\023\n\017TrdAccType_Cas"
      "h\020\001\022\025\n\021TrdAccType_Margin\020\002*z\n\010Currency\022\024"
      "\n\020Currency_Unknown\020\000\022\020\n\014Currency_HKD\020\001\022\020"
      "\n\014Currency_USD\020\002\022\020\n\014Currency_CNH\020\003\022\020\n\014Cu"
      "rrency_JPY\020\004\022\020\n\014Currency_SGD\020\005*\266\001\n\014CltRi"
      "skLevel\022!\n\024CltRiskLevel_Unknown\020\377\377\377\377\377\377\377\377"
      "\377\001\022\025\n\021CltRiskLevel_Safe\020\000\022\030\n\024CltRiskLeve"
      "l_Warning\020\001\022\027\n\023CltRiskLevel_Danger\020\002\022\035\n\031"
      "CltRiskLevel_AbsoluteSafe\020\003\022\032\n\026CltRiskLe"
      "vel_OptDanger\020\004*7\n\013TimeInForce\022\023\n\017TimeIn"
      "Force_DAY\020\000\022\023\n\017TimeInForce_GTC\020\001*|\n\014Secu"
      "rityFirm\022\030\n\024SecurityFirm_Unknown\020\000\022\037\n\033Se"
      "curityFirm_FutuSecurities\020\001\022\030\n\024SecurityF"
      "irm_FutuInc\020\002\022\027\n\023SecurityFirm_FutuSG\020\003*Q"
      "\n\nSimAccType\022\026\n\022SimAccType_Unknown\020\000\022\024\n\020"
      "SimAccType_Stock\020\001\022\025\n\021SimAccType_Option\020"
      "\002*\224\002\n\rCltRiskStatus\022\031\n\025CltRiskStatus_Unk"
      "nown\020\000\022\030\n\024CltRiskStatus_Level1\020\001\022\030\n\024CltR"
      "iskStatus_Level2\020\002\022\030\n\024CltRiskStatus_Leve"
      "l3\020\003\022\030\n\024CltRiskStatus_Level4\020\004\022\030\n\024CltRis"
      "kStatus_Level5\020\005\022\030\n\024CltRiskStatus_Level6"
      "\020\006\022\030\n\024CltRiskStatus_Level7\020\007\022\030\n\024CltRiskS"
      "tatus_Level8\020\010\022\030\n\024CltRiskStatus_Level9\020\t"
      "*b\n\010DTStatus\022\024\n\020DTStatus_Unknown\020\000\022\026\n\022DT"
      "Status_Unlimited\020\001\022\023\n\017DTStatus_EMCall\020\002\022"
      "\023\n\017DTStatus_DTCall\020\003B@\n\023com.futu.openapi"
      ".pbZ)github.com/futuopen/ftapi4go/pb/trd"
      "common"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5486);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Trd_Common.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Trd_5fCommon_2eproto
namespace Trd_Common {
const ::google::protobuf::EnumDescriptor* TrdEnv_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[0];
}
bool TrdEnv_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrdCategory_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[1];
}
bool TrdCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrdMarket_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[2];
}
bool TrdMarket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrdSecMarket_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[3];
}
bool TrdSecMarket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 31:
    case 32:
    case 41:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrdSide_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[4];
}
bool TrdSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderType_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[5];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrailType_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[6];
}
bool TrailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[7];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderFillStatus_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[8];
}
bool OrderFillStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PositionSide_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[9];
}
bool PositionSide_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ModifyOrderOp_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[10];
}
bool ModifyOrderOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrdAccType_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[11];
}
bool TrdAccType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Currency_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[12];
}
bool Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CltRiskLevel_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[13];
}
bool CltRiskLevel_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInForce_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[14];
}
bool TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityFirm_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[15];
}
bool SecurityFirm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SimAccType_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[16];
}
bool SimAccType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CltRiskStatus_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[17];
}
bool CltRiskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DTStatus_descriptor() {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Trd_5fCommon_2eproto::file_level_enum_descriptors[18];
}
bool DTStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AccCashInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccCashInfo::kCurrencyFieldNumber;
const int AccCashInfo::kCashFieldNumber;
const int AccCashInfo::kAvailableBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccCashInfo::AccCashInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsAccCashInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.AccCashInfo)
}
AccCashInfo::AccCashInfo(const AccCashInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cash_, &from.cash_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&cash_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.AccCashInfo)
}

void AccCashInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_) -
      reinterpret_cast<char*>(&cash_)) + sizeof(currency_));
}

AccCashInfo::~AccCashInfo() {
  // @@protoc_insertion_point(destructor:Trd_Common.AccCashInfo)
  SharedDtor();
}

void AccCashInfo::SharedDtor() {
}

void AccCashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccCashInfo::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccCashInfo& AccCashInfo::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsAccCashInfo();
  return *internal_default_instance();
}

AccCashInfo* AccCashInfo::New(::google::protobuf::Arena* arena) const {
  AccCashInfo* n = new AccCashInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccCashInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.AccCashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&cash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&cash_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccCashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.AccCashInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_cash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double availableBalance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_availablebalance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &availablebalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.AccCashInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.AccCashInfo)
  return false;
#undef DO_
}

void AccCashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.AccCashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 currency = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currency(), output);
  }

  // optional double cash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cash(), output);
  }

  // optional double availableBalance = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->availablebalance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.AccCashInfo)
}

::google::protobuf::uint8* AccCashInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.AccCashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 currency = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currency(), target);
  }

  // optional double cash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cash(), target);
  }

  // optional double availableBalance = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->availablebalance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.AccCashInfo)
  return target;
}

size_t AccCashInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.AccCashInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double cash = 2;
    if (has_cash()) {
      total_size += 1 + 8;
    }

    // optional double availableBalance = 3;
    if (has_availablebalance()) {
      total_size += 1 + 8;
    }

    // optional int32 currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccCashInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.AccCashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AccCashInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccCashInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.AccCashInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.AccCashInfo)
    MergeFrom(*source);
  }
}

void AccCashInfo::MergeFrom(const AccCashInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.AccCashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cash_ = from.cash_;
    }
    if (cached_has_bits & 0x00000002u) {
      availablebalance_ = from.availablebalance_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccCashInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.AccCashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccCashInfo::CopyFrom(const AccCashInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.AccCashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccCashInfo::IsInitialized() const {
  return true;
}

void AccCashInfo::Swap(AccCashInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccCashInfo::InternalSwap(AccCashInfo* other) {
  using std::swap;
  swap(cash_, other->cash_);
  swap(availablebalance_, other->availablebalance_);
  swap(currency_, other->currency_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccCashInfo::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrdHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrdHeader::kTrdEnvFieldNumber;
const int TrdHeader::kAccIDFieldNumber;
const int TrdHeader::kTrdMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrdHeader::TrdHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.TrdHeader)
}
TrdHeader::TrdHeader(const TrdHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accid_, &from.accid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trdmarket_) -
    reinterpret_cast<char*>(&accid_)) + sizeof(trdmarket_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.TrdHeader)
}

void TrdHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&accid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trdmarket_) -
      reinterpret_cast<char*>(&accid_)) + sizeof(trdmarket_));
}

TrdHeader::~TrdHeader() {
  // @@protoc_insertion_point(destructor:Trd_Common.TrdHeader)
  SharedDtor();
}

void TrdHeader::SharedDtor() {
}

void TrdHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrdHeader::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrdHeader& TrdHeader::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdHeader();
  return *internal_default_instance();
}

TrdHeader* TrdHeader::New(::google::protobuf::Arena* arena) const {
  TrdHeader* n = new TrdHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrdHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.TrdHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&accid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trdmarket_) -
        reinterpret_cast<char*>(&accid_)) + sizeof(trdmarket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrdHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.TrdHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trdEnv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trdenv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdenv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 accID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trdMarket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trdmarket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.TrdHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.TrdHeader)
  return false;
#undef DO_
}

void TrdHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.TrdHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdEnv = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trdenv(), output);
  }

  // required uint64 accID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // required int32 trdMarket = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trdmarket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.TrdHeader)
}

::google::protobuf::uint8* TrdHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.TrdHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdEnv = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trdenv(), target);
  }

  // required uint64 accID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // required int32 trdMarket = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trdmarket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.TrdHeader)
  return target;
}

size_t TrdHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.TrdHeader)
  size_t total_size = 0;

  if (has_accid()) {
    // required uint64 accID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accid());
  }

  if (has_trdenv()) {
    // required int32 trdEnv = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdenv());
  }

  if (has_trdmarket()) {
    // required int32 trdMarket = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdmarket());
  }

  return total_size;
}
size_t TrdHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.TrdHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 accID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accid());

    // required int32 trdEnv = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdenv());

    // required int32 trdMarket = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdmarket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrdHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.TrdHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TrdHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrdHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.TrdHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.TrdHeader)
    MergeFrom(*source);
  }
}

void TrdHeader::MergeFrom(const TrdHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.TrdHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      accid_ = from.accid_;
    }
    if (cached_has_bits & 0x00000002u) {
      trdenv_ = from.trdenv_;
    }
    if (cached_has_bits & 0x00000004u) {
      trdmarket_ = from.trdmarket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrdHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.TrdHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrdHeader::CopyFrom(const TrdHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.TrdHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrdHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TrdHeader::Swap(TrdHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrdHeader::InternalSwap(TrdHeader* other) {
  using std::swap;
  swap(accid_, other->accid_);
  swap(trdenv_, other->trdenv_);
  swap(trdmarket_, other->trdmarket_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrdHeader::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrdAcc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrdAcc::kTrdEnvFieldNumber;
const int TrdAcc::kAccIDFieldNumber;
const int TrdAcc::kTrdMarketAuthListFieldNumber;
const int TrdAcc::kAccTypeFieldNumber;
const int TrdAcc::kCardNumFieldNumber;
const int TrdAcc::kSecurityFirmFieldNumber;
const int TrdAcc::kSimAccTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrdAcc::TrdAcc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdAcc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.TrdAcc)
}
TrdAcc::TrdAcc(const TrdAcc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trdmarketauthlist_(from.trdmarketauthlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cardnum()) {
    cardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardnum_);
  }
  ::memcpy(&accid_, &from.accid_,
    static_cast<size_t>(reinterpret_cast<char*>(&simacctype_) -
    reinterpret_cast<char*>(&accid_)) + sizeof(simacctype_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.TrdAcc)
}

void TrdAcc::SharedCtor() {
  _cached_size_ = 0;
  cardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simacctype_) -
      reinterpret_cast<char*>(&accid_)) + sizeof(simacctype_));
}

TrdAcc::~TrdAcc() {
  // @@protoc_insertion_point(destructor:Trd_Common.TrdAcc)
  SharedDtor();
}

void TrdAcc::SharedDtor() {
  cardnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrdAcc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrdAcc::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrdAcc& TrdAcc::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdAcc();
  return *internal_default_instance();
}

TrdAcc* TrdAcc::New(::google::protobuf::Arena* arena) const {
  TrdAcc* n = new TrdAcc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrdAcc::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.TrdAcc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trdmarketauthlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!cardnum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cardnum_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&accid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&simacctype_) -
        reinterpret_cast<char*>(&accid_)) + sizeof(simacctype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrdAcc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.TrdAcc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trdEnv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trdenv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdenv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 accID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 trdMarketAuthList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_trdmarketauthlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trdmarketauthlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 accType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_acctype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acctype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cardNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardnum().data(), static_cast<int>(this->cardnum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.TrdAcc.cardNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 securityFirm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_securityfirm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &securityfirm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 simAccType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_simacctype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &simacctype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.TrdAcc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.TrdAcc)
  return false;
#undef DO_
}

void TrdAcc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.TrdAcc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdEnv = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trdenv(), output);
  }

  // required uint64 accID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // repeated int32 trdMarketAuthList = 3;
  for (int i = 0, n = this->trdmarketauthlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->trdmarketauthlist(i), output);
  }

  // optional int32 accType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->acctype(), output);
  }

  // optional string cardNum = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardnum().data(), static_cast<int>(this->cardnum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdAcc.cardNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cardnum(), output);
  }

  // optional int32 securityFirm = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->securityfirm(), output);
  }

  // optional int32 simAccType = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->simacctype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.TrdAcc)
}

::google::protobuf::uint8* TrdAcc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.TrdAcc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdEnv = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trdenv(), target);
  }

  // required uint64 accID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // repeated int32 trdMarketAuthList = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->trdmarketauthlist_, target);

  // optional int32 accType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->acctype(), target);
  }

  // optional string cardNum = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardnum().data(), static_cast<int>(this->cardnum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdAcc.cardNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cardnum(), target);
  }

  // optional int32 securityFirm = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->securityfirm(), target);
  }

  // optional int32 simAccType = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->simacctype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.TrdAcc)
  return target;
}

size_t TrdAcc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.TrdAcc)
  size_t total_size = 0;

  if (has_accid()) {
    // required uint64 accID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accid());
  }

  if (has_trdenv()) {
    // required int32 trdEnv = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdenv());
  }

  return total_size;
}
size_t TrdAcc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.TrdAcc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 accID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accid());

    // required int32 trdEnv = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdenv());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 trdMarketAuthList = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->trdmarketauthlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->trdmarketauthlist_size());
    total_size += data_size;
  }

  // optional string cardNum = 5;
  if (has_cardnum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cardnum());
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional int32 accType = 4;
    if (has_acctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acctype());
    }

    // optional int32 securityFirm = 6;
    if (has_securityfirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->securityfirm());
    }

    // optional int32 simAccType = 7;
    if (has_simacctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->simacctype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrdAcc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.TrdAcc)
  GOOGLE_DCHECK_NE(&from, this);
  const TrdAcc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrdAcc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.TrdAcc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.TrdAcc)
    MergeFrom(*source);
  }
}

void TrdAcc::MergeFrom(const TrdAcc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.TrdAcc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trdmarketauthlist_.MergeFrom(from.trdmarketauthlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cardnum();
      cardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardnum_);
    }
    if (cached_has_bits & 0x00000002u) {
      accid_ = from.accid_;
    }
    if (cached_has_bits & 0x00000004u) {
      trdenv_ = from.trdenv_;
    }
    if (cached_has_bits & 0x00000008u) {
      acctype_ = from.acctype_;
    }
    if (cached_has_bits & 0x00000010u) {
      securityfirm_ = from.securityfirm_;
    }
    if (cached_has_bits & 0x00000020u) {
      simacctype_ = from.simacctype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrdAcc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.TrdAcc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrdAcc::CopyFrom(const TrdAcc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.TrdAcc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrdAcc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void TrdAcc::Swap(TrdAcc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrdAcc::InternalSwap(TrdAcc* other) {
  using std::swap;
  trdmarketauthlist_.InternalSwap(&other->trdmarketauthlist_);
  cardnum_.Swap(&other->cardnum_);
  swap(accid_, other->accid_);
  swap(trdenv_, other->trdenv_);
  swap(acctype_, other->acctype_);
  swap(securityfirm_, other->securityfirm_);
  swap(simacctype_, other->simacctype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrdAcc::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Funds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Funds::kPowerFieldNumber;
const int Funds::kTotalAssetsFieldNumber;
const int Funds::kCashFieldNumber;
const int Funds::kMarketValFieldNumber;
const int Funds::kFrozenCashFieldNumber;
const int Funds::kDebtCashFieldNumber;
const int Funds::kAvlWithdrawalCashFieldNumber;
const int Funds::kCurrencyFieldNumber;
const int Funds::kAvailableFundsFieldNumber;
const int Funds::kUnrealizedPLFieldNumber;
const int Funds::kRealizedPLFieldNumber;
const int Funds::kRiskLevelFieldNumber;
const int Funds::kInitialMarginFieldNumber;
const int Funds::kMaintenanceMarginFieldNumber;
const int Funds::kCashInfoListFieldNumber;
const int Funds::kMaxPowerShortFieldNumber;
const int Funds::kNetCashPowerFieldNumber;
const int Funds::kLongMvFieldNumber;
const int Funds::kShortMvFieldNumber;
const int Funds::kPendingAssetFieldNumber;
const int Funds::kMaxWithdrawalFieldNumber;
const int Funds::kRiskStatusFieldNumber;
const int Funds::kMarginCallMarginFieldNumber;
const int Funds::kIsPdtFieldNumber;
const int Funds::kPdtSeqFieldNumber;
const int Funds::kBeginningDTBPFieldNumber;
const int Funds::kRemainingDTBPFieldNumber;
const int Funds::kDtCallAmountFieldNumber;
const int Funds::kDtStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Funds::Funds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsFunds();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.Funds)
}
Funds::Funds(const Funds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cashinfolist_(from.cashinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pdtseq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pdtseq()) {
    pdtseq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pdtseq_);
  }
  ::memcpy(&power_, &from.power_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtstatus_) -
    reinterpret_cast<char*>(&power_)) + sizeof(dtstatus_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.Funds)
}

void Funds::SharedCtor() {
  _cached_size_ = 0;
  pdtseq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtstatus_) -
      reinterpret_cast<char*>(&power_)) + sizeof(dtstatus_));
}

Funds::~Funds() {
  // @@protoc_insertion_point(destructor:Trd_Common.Funds)
  SharedDtor();
}

void Funds::SharedDtor() {
  pdtseq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Funds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Funds::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Funds& Funds::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsFunds();
  return *internal_default_instance();
}

Funds* Funds::New(::google::protobuf::Arena* arena) const {
  Funds* n = new Funds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Funds::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.Funds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cashinfolist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!pdtseq_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pdtseq_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avlwithdrawalcash_) -
        reinterpret_cast<char*>(&power_)) + sizeof(avlwithdrawalcash_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&availablefunds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxpowershort_) -
        reinterpret_cast<char*>(&availablefunds_)) + sizeof(maxpowershort_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&netcashpower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ispdt_) -
        reinterpret_cast<char*>(&netcashpower_)) + sizeof(ispdt_));
  }
  if (cached_has_bits & 251658240u) {
    ::memset(&beginningdtbp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dtstatus_) -
        reinterpret_cast<char*>(&beginningdtbp_)) + sizeof(dtstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Funds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.Funds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double power = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double totalAssets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_totalassets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalassets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_cash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double marketVal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_marketval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marketval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double frozenCash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_frozencash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double debtCash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_debtcash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &debtcash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avlWithdrawalCash = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_avlwithdrawalcash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avlwithdrawalcash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double availableFunds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_availablefunds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &availablefunds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unrealizedPL = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_unrealizedpl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unrealizedpl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double realizedPL = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_realizedpl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realizedpl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 riskLevel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_risklevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &risklevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double initialMargin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_initialmargin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initialmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maintenanceMargin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_maintenancemargin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maintenancemargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Trd_Common.AccCashInfo cashInfoList = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cashinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maxPowerShort = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_maxpowershort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxpowershort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double netCashPower = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_netcashpower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netcashpower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longMv = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_longmv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longmv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double shortMv = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_shortmv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortmv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pendingAsset = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_pendingasset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pendingasset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maxWithdrawal = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_maxwithdrawal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxwithdrawal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 riskStatus = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_riskstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &riskstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double marginCallMargin = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_margincallmargin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margincallmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isPdt = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_ispdt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispdt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pdtSeq = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdtseq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pdtseq().data(), static_cast<int>(this->pdtseq().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Funds.pdtSeq");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beginningDTBP = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_beginningdtbp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beginningdtbp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double remainingDTBP = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_remainingdtbp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remainingdtbp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dtCallAmount = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_dtcallamount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dtcallamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dtStatus = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_dtstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.Funds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.Funds)
  return false;
#undef DO_
}

void Funds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.Funds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double power = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->power(), output);
  }

  // required double totalAssets = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->totalassets(), output);
  }

  // required double cash = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cash(), output);
  }

  // required double marketVal = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->marketval(), output);
  }

  // required double frozenCash = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->frozencash(), output);
  }

  // required double debtCash = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->debtcash(), output);
  }

  // required double avlWithdrawalCash = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->avlwithdrawalcash(), output);
  }

  // optional int32 currency = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currency(), output);
  }

  // optional double availableFunds = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->availablefunds(), output);
  }

  // optional double unrealizedPL = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->unrealizedpl(), output);
  }

  // optional double realizedPL = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->realizedpl(), output);
  }

  // optional int32 riskLevel = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->risklevel(), output);
  }

  // optional double initialMargin = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->initialmargin(), output);
  }

  // optional double maintenanceMargin = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->maintenancemargin(), output);
  }

  // repeated .Trd_Common.AccCashInfo cashInfoList = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cashinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cashinfolist(static_cast<int>(i)), output);
  }

  // optional double maxPowerShort = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->maxpowershort(), output);
  }

  // optional double netCashPower = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->netcashpower(), output);
  }

  // optional double longMv = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->longmv(), output);
  }

  // optional double shortMv = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->shortmv(), output);
  }

  // optional double pendingAsset = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->pendingasset(), output);
  }

  // optional double maxWithdrawal = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->maxwithdrawal(), output);
  }

  // optional int32 riskStatus = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->riskstatus(), output);
  }

  // optional double marginCallMargin = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->margincallmargin(), output);
  }

  // optional bool isPdt = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->ispdt(), output);
  }

  // optional string pdtSeq = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pdtseq().data(), static_cast<int>(this->pdtseq().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Funds.pdtSeq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->pdtseq(), output);
  }

  // optional double beginningDTBP = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->beginningdtbp(), output);
  }

  // optional double remainingDTBP = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->remainingdtbp(), output);
  }

  // optional double dtCallAmount = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->dtcallamount(), output);
  }

  // optional int32 dtStatus = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->dtstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.Funds)
}

::google::protobuf::uint8* Funds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.Funds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double power = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->power(), target);
  }

  // required double totalAssets = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->totalassets(), target);
  }

  // required double cash = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cash(), target);
  }

  // required double marketVal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->marketval(), target);
  }

  // required double frozenCash = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->frozencash(), target);
  }

  // required double debtCash = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->debtcash(), target);
  }

  // required double avlWithdrawalCash = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->avlwithdrawalcash(), target);
  }

  // optional int32 currency = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currency(), target);
  }

  // optional double availableFunds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->availablefunds(), target);
  }

  // optional double unrealizedPL = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->unrealizedpl(), target);
  }

  // optional double realizedPL = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->realizedpl(), target);
  }

  // optional int32 riskLevel = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->risklevel(), target);
  }

  // optional double initialMargin = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->initialmargin(), target);
  }

  // optional double maintenanceMargin = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->maintenancemargin(), target);
  }

  // repeated .Trd_Common.AccCashInfo cashInfoList = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cashinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->cashinfolist(static_cast<int>(i)), deterministic, target);
  }

  // optional double maxPowerShort = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->maxpowershort(), target);
  }

  // optional double netCashPower = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->netcashpower(), target);
  }

  // optional double longMv = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->longmv(), target);
  }

  // optional double shortMv = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->shortmv(), target);
  }

  // optional double pendingAsset = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->pendingasset(), target);
  }

  // optional double maxWithdrawal = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->maxwithdrawal(), target);
  }

  // optional int32 riskStatus = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->riskstatus(), target);
  }

  // optional double marginCallMargin = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->margincallmargin(), target);
  }

  // optional bool isPdt = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->ispdt(), target);
  }

  // optional string pdtSeq = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pdtseq().data(), static_cast<int>(this->pdtseq().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Funds.pdtSeq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->pdtseq(), target);
  }

  // optional double beginningDTBP = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->beginningdtbp(), target);
  }

  // optional double remainingDTBP = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->remainingdtbp(), target);
  }

  // optional double dtCallAmount = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->dtcallamount(), target);
  }

  // optional int32 dtStatus = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->dtstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.Funds)
  return target;
}

size_t Funds::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.Funds)
  size_t total_size = 0;

  if (has_power()) {
    // required double power = 1;
    total_size += 1 + 8;
  }

  if (has_totalassets()) {
    // required double totalAssets = 2;
    total_size += 1 + 8;
  }

  if (has_cash()) {
    // required double cash = 3;
    total_size += 1 + 8;
  }

  if (has_marketval()) {
    // required double marketVal = 4;
    total_size += 1 + 8;
  }

  if (has_frozencash()) {
    // required double frozenCash = 5;
    total_size += 1 + 8;
  }

  if (has_debtcash()) {
    // required double debtCash = 6;
    total_size += 1 + 8;
  }

  if (has_avlwithdrawalcash()) {
    // required double avlWithdrawalCash = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Funds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.Funds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required double power = 1;
    total_size += 1 + 8;

    // required double totalAssets = 2;
    total_size += 1 + 8;

    // required double cash = 3;
    total_size += 1 + 8;

    // required double marketVal = 4;
    total_size += 1 + 8;

    // required double frozenCash = 5;
    total_size += 1 + 8;

    // required double debtCash = 6;
    total_size += 1 + 8;

    // required double avlWithdrawalCash = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Trd_Common.AccCashInfo cashInfoList = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->cashinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cashinfolist(static_cast<int>(i)));
    }
  }

  // optional string pdtSeq = 25;
  if (has_pdtseq()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pdtseq());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional double availableFunds = 9;
    if (has_availablefunds()) {
      total_size += 1 + 8;
    }

    // optional double unrealizedPL = 10;
    if (has_unrealizedpl()) {
      total_size += 1 + 8;
    }

    // optional int32 currency = 8;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 riskLevel = 12;
    if (has_risklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->risklevel());
    }

    // optional double realizedPL = 11;
    if (has_realizedpl()) {
      total_size += 1 + 8;
    }

    // optional double initialMargin = 13;
    if (has_initialmargin()) {
      total_size += 1 + 8;
    }

    // optional double maintenanceMargin = 14;
    if (has_maintenancemargin()) {
      total_size += 1 + 8;
    }

    // optional double maxPowerShort = 16;
    if (has_maxpowershort()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double netCashPower = 17;
    if (has_netcashpower()) {
      total_size += 2 + 8;
    }

    // optional double longMv = 18;
    if (has_longmv()) {
      total_size += 2 + 8;
    }

    // optional double shortMv = 19;
    if (has_shortmv()) {
      total_size += 2 + 8;
    }

    // optional double pendingAsset = 20;
    if (has_pendingasset()) {
      total_size += 2 + 8;
    }

    // optional double maxWithdrawal = 21;
    if (has_maxwithdrawal()) {
      total_size += 2 + 8;
    }

    // optional double marginCallMargin = 23;
    if (has_margincallmargin()) {
      total_size += 2 + 8;
    }

    // optional int32 riskStatus = 22;
    if (has_riskstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->riskstatus());
    }

    // optional bool isPdt = 24;
    if (has_ispdt()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional double beginningDTBP = 26;
    if (has_beginningdtbp()) {
      total_size += 2 + 8;
    }

    // optional double remainingDTBP = 27;
    if (has_remainingdtbp()) {
      total_size += 2 + 8;
    }

    // optional double dtCallAmount = 28;
    if (has_dtcallamount()) {
      total_size += 2 + 8;
    }

    // optional int32 dtStatus = 29;
    if (has_dtstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Funds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.Funds)
  GOOGLE_DCHECK_NE(&from, this);
  const Funds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Funds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.Funds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.Funds)
    MergeFrom(*source);
  }
}

void Funds::MergeFrom(const Funds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.Funds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cashinfolist_.MergeFrom(from.cashinfolist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pdtseq();
      pdtseq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pdtseq_);
    }
    if (cached_has_bits & 0x00000002u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalassets_ = from.totalassets_;
    }
    if (cached_has_bits & 0x00000008u) {
      cash_ = from.cash_;
    }
    if (cached_has_bits & 0x00000010u) {
      marketval_ = from.marketval_;
    }
    if (cached_has_bits & 0x00000020u) {
      frozencash_ = from.frozencash_;
    }
    if (cached_has_bits & 0x00000040u) {
      debtcash_ = from.debtcash_;
    }
    if (cached_has_bits & 0x00000080u) {
      avlwithdrawalcash_ = from.avlwithdrawalcash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      availablefunds_ = from.availablefunds_;
    }
    if (cached_has_bits & 0x00000200u) {
      unrealizedpl_ = from.unrealizedpl_;
    }
    if (cached_has_bits & 0x00000400u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00000800u) {
      risklevel_ = from.risklevel_;
    }
    if (cached_has_bits & 0x00001000u) {
      realizedpl_ = from.realizedpl_;
    }
    if (cached_has_bits & 0x00002000u) {
      initialmargin_ = from.initialmargin_;
    }
    if (cached_has_bits & 0x00004000u) {
      maintenancemargin_ = from.maintenancemargin_;
    }
    if (cached_has_bits & 0x00008000u) {
      maxpowershort_ = from.maxpowershort_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      netcashpower_ = from.netcashpower_;
    }
    if (cached_has_bits & 0x00020000u) {
      longmv_ = from.longmv_;
    }
    if (cached_has_bits & 0x00040000u) {
      shortmv_ = from.shortmv_;
    }
    if (cached_has_bits & 0x00080000u) {
      pendingasset_ = from.pendingasset_;
    }
    if (cached_has_bits & 0x00100000u) {
      maxwithdrawal_ = from.maxwithdrawal_;
    }
    if (cached_has_bits & 0x00200000u) {
      margincallmargin_ = from.margincallmargin_;
    }
    if (cached_has_bits & 0x00400000u) {
      riskstatus_ = from.riskstatus_;
    }
    if (cached_has_bits & 0x00800000u) {
      ispdt_ = from.ispdt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      beginningdtbp_ = from.beginningdtbp_;
    }
    if (cached_has_bits & 0x02000000u) {
      remainingdtbp_ = from.remainingdtbp_;
    }
    if (cached_has_bits & 0x04000000u) {
      dtcallamount_ = from.dtcallamount_;
    }
    if (cached_has_bits & 0x08000000u) {
      dtstatus_ = from.dtstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Funds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.Funds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Funds::CopyFrom(const Funds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.Funds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Funds::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;
  return true;
}

void Funds::Swap(Funds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Funds::InternalSwap(Funds* other) {
  using std::swap;
  cashinfolist_.InternalSwap(&other->cashinfolist_);
  pdtseq_.Swap(&other->pdtseq_);
  swap(power_, other->power_);
  swap(totalassets_, other->totalassets_);
  swap(cash_, other->cash_);
  swap(marketval_, other->marketval_);
  swap(frozencash_, other->frozencash_);
  swap(debtcash_, other->debtcash_);
  swap(avlwithdrawalcash_, other->avlwithdrawalcash_);
  swap(availablefunds_, other->availablefunds_);
  swap(unrealizedpl_, other->unrealizedpl_);
  swap(currency_, other->currency_);
  swap(risklevel_, other->risklevel_);
  swap(realizedpl_, other->realizedpl_);
  swap(initialmargin_, other->initialmargin_);
  swap(maintenancemargin_, other->maintenancemargin_);
  swap(maxpowershort_, other->maxpowershort_);
  swap(netcashpower_, other->netcashpower_);
  swap(longmv_, other->longmv_);
  swap(shortmv_, other->shortmv_);
  swap(pendingasset_, other->pendingasset_);
  swap(maxwithdrawal_, other->maxwithdrawal_);
  swap(margincallmargin_, other->margincallmargin_);
  swap(riskstatus_, other->riskstatus_);
  swap(ispdt_, other->ispdt_);
  swap(beginningdtbp_, other->beginningdtbp_);
  swap(remainingdtbp_, other->remainingdtbp_);
  swap(dtcallamount_, other->dtcallamount_);
  swap(dtstatus_, other->dtstatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Funds::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kPositionIDFieldNumber;
const int Position::kPositionSideFieldNumber;
const int Position::kCodeFieldNumber;
const int Position::kNameFieldNumber;
const int Position::kQtyFieldNumber;
const int Position::kCanSellQtyFieldNumber;
const int Position::kPriceFieldNumber;
const int Position::kCostPriceFieldNumber;
const int Position::kValFieldNumber;
const int Position::kPlValFieldNumber;
const int Position::kPlRatioFieldNumber;
const int Position::kSecMarketFieldNumber;
const int Position::kTdPlValFieldNumber;
const int Position::kTdTrdValFieldNumber;
const int Position::kTdBuyValFieldNumber;
const int Position::kTdBuyQtyFieldNumber;
const int Position::kTdSellValFieldNumber;
const int Position::kTdSellQtyFieldNumber;
const int Position::kUnrealizedPLFieldNumber;
const int Position::kRealizedPLFieldNumber;
const int Position::kCurrencyFieldNumber;
const int Position::kTrdMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsPosition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trdmarket_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(trdmarket_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trdmarket_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(trdmarket_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Trd_Common.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsPosition();
  return *internal_default_instance();
}

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&positionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secmarket_) -
        reinterpret_cast<char*>(&positionid_)) + sizeof(secmarket_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&costprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&td_buyqty_) -
        reinterpret_cast<char*>(&costprice_)) + sizeof(td_buyqty_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&td_sellval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trdmarket_) -
        reinterpret_cast<char*>(&td_sellval_)) + sizeof(trdmarket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 positionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_positionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &positionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 positionSide = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_positionside();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Position.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Position.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double qty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double canSellQty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_cansellqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cansellqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double costPrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_costprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &costprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double val = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double plVal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_plval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double plRatio = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_plratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 secMarket = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_secmarket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double td_plVal = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_td_plval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &td_plval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double td_trdVal = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_td_trdval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &td_trdval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double td_buyVal = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_td_buyval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &td_buyval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double td_buyQty = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_td_buyqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &td_buyqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double td_sellVal = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_td_sellval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &td_sellval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double td_sellQty = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_td_sellqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &td_sellqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unrealizedPL = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_unrealizedpl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unrealizedpl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double realizedPL = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_realizedpl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realizedpl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trdMarket = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_trdmarket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 positionID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->positionid(), output);
  }

  // required int32 positionSide = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->positionside(), output);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Position.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // required string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Position.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required double qty = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->qty(), output);
  }

  // required double canSellQty = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cansellqty(), output);
  }

  // required double price = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price(), output);
  }

  // optional double costPrice = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->costprice(), output);
  }

  // required double val = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->val(), output);
  }

  // required double plVal = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->plval(), output);
  }

  // optional double plRatio = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->plratio(), output);
  }

  // optional int32 secMarket = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->secmarket(), output);
  }

  // optional double td_plVal = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->td_plval(), output);
  }

  // optional double td_trdVal = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->td_trdval(), output);
  }

  // optional double td_buyVal = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->td_buyval(), output);
  }

  // optional double td_buyQty = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->td_buyqty(), output);
  }

  // optional double td_sellVal = 25;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->td_sellval(), output);
  }

  // optional double td_sellQty = 26;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->td_sellqty(), output);
  }

  // optional double unrealizedPL = 28;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->unrealizedpl(), output);
  }

  // optional double realizedPL = 29;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->realizedpl(), output);
  }

  // optional int32 currency = 30;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->currency(), output);
  }

  // optional int32 trdMarket = 31;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->trdmarket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 positionID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->positionid(), target);
  }

  // required int32 positionSide = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->positionside(), target);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Position.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // required string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Position.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required double qty = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->qty(), target);
  }

  // required double canSellQty = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cansellqty(), target);
  }

  // required double price = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price(), target);
  }

  // optional double costPrice = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->costprice(), target);
  }

  // required double val = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->val(), target);
  }

  // required double plVal = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->plval(), target);
  }

  // optional double plRatio = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->plratio(), target);
  }

  // optional int32 secMarket = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->secmarket(), target);
  }

  // optional double td_plVal = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->td_plval(), target);
  }

  // optional double td_trdVal = 22;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->td_trdval(), target);
  }

  // optional double td_buyVal = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->td_buyval(), target);
  }

  // optional double td_buyQty = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->td_buyqty(), target);
  }

  // optional double td_sellVal = 25;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->td_sellval(), target);
  }

  // optional double td_sellQty = 26;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->td_sellqty(), target);
  }

  // optional double unrealizedPL = 28;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->unrealizedpl(), target);
  }

  // optional double realizedPL = 29;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->realizedpl(), target);
  }

  // optional int32 currency = 30;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->currency(), target);
  }

  // optional int32 trdMarket = 31;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->trdmarket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.Position)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_name()) {
    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_positionid()) {
    // required uint64 positionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->positionid());
  }

  if (has_qty()) {
    // required double qty = 5;
    total_size += 1 + 8;
  }

  if (has_cansellqty()) {
    // required double canSellQty = 6;
    total_size += 1 + 8;
  }

  if (has_price()) {
    // required double price = 7;
    total_size += 1 + 8;
  }

  if (has_positionside()) {
    // required int32 positionSide = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->positionside());
  }

  if (has_val()) {
    // required double val = 9;
    total_size += 1 + 8;
  }

  if (has_plval()) {
    // required double plVal = 10;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000067f) ^ 0x0000067f) == 0) {  // All required fields are present.
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 positionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->positionid());

    // required double qty = 5;
    total_size += 1 + 8;

    // required double canSellQty = 6;
    total_size += 1 + 8;

    // required double price = 7;
    total_size += 1 + 8;

    // required int32 positionSide = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->positionside());

    // required double val = 9;
    total_size += 1 + 8;

    // required double plVal = 10;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 secMarket = 12;
  if (has_secmarket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->secmarket());
  }

  // optional double costPrice = 8;
  if (has_costprice()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[8 / 32] & 63488u) {
    // optional double plRatio = 11;
    if (has_plratio()) {
      total_size += 1 + 8;
    }

    // optional double td_plVal = 21;
    if (has_td_plval()) {
      total_size += 2 + 8;
    }

    // optional double td_trdVal = 22;
    if (has_td_trdval()) {
      total_size += 2 + 8;
    }

    // optional double td_buyVal = 23;
    if (has_td_buyval()) {
      total_size += 2 + 8;
    }

    // optional double td_buyQty = 24;
    if (has_td_buyqty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double td_sellVal = 25;
    if (has_td_sellval()) {
      total_size += 2 + 8;
    }

    // optional double td_sellQty = 26;
    if (has_td_sellqty()) {
      total_size += 2 + 8;
    }

    // optional double unrealizedPL = 28;
    if (has_unrealizedpl()) {
      total_size += 2 + 8;
    }

    // optional double realizedPL = 29;
    if (has_realizedpl()) {
      total_size += 2 + 8;
    }

    // optional int32 currency = 30;
    if (has_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 trdMarket = 31;
    if (has_trdmarket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trdmarket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000010u) {
      cansellqty_ = from.cansellqty_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      positionside_ = from.positionside_;
    }
    if (cached_has_bits & 0x00000080u) {
      secmarket_ = from.secmarket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      costprice_ = from.costprice_;
    }
    if (cached_has_bits & 0x00000200u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000400u) {
      plval_ = from.plval_;
    }
    if (cached_has_bits & 0x00000800u) {
      plratio_ = from.plratio_;
    }
    if (cached_has_bits & 0x00001000u) {
      td_plval_ = from.td_plval_;
    }
    if (cached_has_bits & 0x00002000u) {
      td_trdval_ = from.td_trdval_;
    }
    if (cached_has_bits & 0x00004000u) {
      td_buyval_ = from.td_buyval_;
    }
    if (cached_has_bits & 0x00008000u) {
      td_buyqty_ = from.td_buyqty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      td_sellval_ = from.td_sellval_;
    }
    if (cached_has_bits & 0x00020000u) {
      td_sellqty_ = from.td_sellqty_;
    }
    if (cached_has_bits & 0x00040000u) {
      unrealizedpl_ = from.unrealizedpl_;
    }
    if (cached_has_bits & 0x00080000u) {
      realizedpl_ = from.realizedpl_;
    }
    if (cached_has_bits & 0x00100000u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00200000u) {
      trdmarket_ = from.trdmarket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000067f) != 0x0000067f) return false;
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  code_.Swap(&other->code_);
  name_.Swap(&other->name_);
  swap(positionid_, other->positionid_);
  swap(qty_, other->qty_);
  swap(cansellqty_, other->cansellqty_);
  swap(price_, other->price_);
  swap(positionside_, other->positionside_);
  swap(secmarket_, other->secmarket_);
  swap(costprice_, other->costprice_);
  swap(val_, other->val_);
  swap(plval_, other->plval_);
  swap(plratio_, other->plratio_);
  swap(td_plval_, other->td_plval_);
  swap(td_trdval_, other->td_trdval_);
  swap(td_buyval_, other->td_buyval_);
  swap(td_buyqty_, other->td_buyqty_);
  swap(td_sellval_, other->td_sellval_);
  swap(td_sellqty_, other->td_sellqty_);
  swap(unrealizedpl_, other->unrealizedpl_);
  swap(realizedpl_, other->realizedpl_);
  swap(currency_, other->currency_);
  swap(trdmarket_, other->trdmarket_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Order::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Order::kTrdSideFieldNumber;
const int Order::kOrderTypeFieldNumber;
const int Order::kOrderStatusFieldNumber;
const int Order::kOrderIDFieldNumber;
const int Order::kOrderIDExFieldNumber;
const int Order::kCodeFieldNumber;
const int Order::kNameFieldNumber;
const int Order::kQtyFieldNumber;
const int Order::kPriceFieldNumber;
const int Order::kCreateTimeFieldNumber;
const int Order::kUpdateTimeFieldNumber;
const int Order::kFillQtyFieldNumber;
const int Order::kFillAvgPriceFieldNumber;
const int Order::kLastErrMsgFieldNumber;
const int Order::kSecMarketFieldNumber;
const int Order::kCreateTimestampFieldNumber;
const int Order::kUpdateTimestampFieldNumber;
const int Order::kRemarkFieldNumber;
const int Order::kTimeInForceFieldNumber;
const int Order::kFillOutsideRTHFieldNumber;
const int Order::kAuxPriceFieldNumber;
const int Order::kTrailTypeFieldNumber;
const int Order::kTrailValueFieldNumber;
const int Order::kTrailSpreadFieldNumber;
const int Order::kCurrencyFieldNumber;
const int Order::kTrdMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsOrder();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.Order)
}
Order::Order(const Order& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderidex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderidex()) {
    orderidex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderidex_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  createtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_createtime()) {
    createtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createtime_);
  }
  updatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_updatetime()) {
    updatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatetime_);
  }
  lasterrmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lasterrmsg()) {
    lasterrmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lasterrmsg_);
  }
  remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_remark()) {
    remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  ::memcpy(&trdside_, &from.trdside_,
    static_cast<size_t>(reinterpret_cast<char*>(&trdmarket_) -
    reinterpret_cast<char*>(&trdside_)) + sizeof(trdmarket_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.Order)
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  orderidex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasterrmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trdside_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trdmarket_) -
      reinterpret_cast<char*>(&trdside_)) + sizeof(trdmarket_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:Trd_Common.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  orderidex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasterrmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Order& Order::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsOrder();
  return *internal_default_instance();
}

Order* Order::New(::google::protobuf::Arena* arena) const {
  Order* n = new Order;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!orderidex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orderidex_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!createtime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*createtime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!updatetime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*updatetime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!lasterrmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lasterrmsg_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!remark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*remark_.UnsafeRawStringPointer())->clear();
    }
  }
  trdside_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&ordertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fillavgprice_) -
        reinterpret_cast<char*>(&ordertype_)) + sizeof(fillavgprice_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&createtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&createtimestamp_)) + sizeof(currency_));
  }
  if (cached_has_bits & 50331648u) {
    ::memset(&trailspread_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trdmarket_) -
        reinterpret_cast<char*>(&trailspread_)) + sizeof(trdmarket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trdSide = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trdside();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 orderType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ordertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 orderStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_orderstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 orderID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_orderid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderIDEx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderidex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderidex().data(), static_cast<int>(this->orderidex().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.orderIDEx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string createTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), static_cast<int>(this->createtime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.createTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string updateTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updatetime().data(), static_cast<int>(this->updatetime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.updateTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fillQty = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_fillqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fillqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fillAvgPrice = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_fillavgprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fillavgprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lastErrMsg = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasterrmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lasterrmsg().data(), static_cast<int>(this->lasterrmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.lastErrMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 secMarket = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_secmarket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double createTimestamp = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_createtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &createtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double updateTimestamp = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_updatetimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &updatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string remark = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), static_cast<int>(this->remark().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.Order.remark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeInForce = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_timeinforce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeinforce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fillOutsideRTH = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_filloutsiderth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filloutsiderth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double auxPrice = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_auxprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &auxprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trailType = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_trailtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trailtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trailValue = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_trailvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trailvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trailSpread = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_trailspread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trailspread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trdMarket = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_trdmarket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdSide = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trdside(), output);
  }

  // required int32 orderType = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordertype(), output);
  }

  // required int32 orderStatus = 3;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderstatus(), output);
  }

  // required uint64 orderID = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->orderid(), output);
  }

  // required string orderIDEx = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderidex().data(), static_cast<int>(this->orderidex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.orderIDEx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderidex(), output);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // required string name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // required double qty = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->qty(), output);
  }

  // optional double price = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->price(), output);
  }

  // required string createTime = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), static_cast<int>(this->createtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.createTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->createtime(), output);
  }

  // required string updateTime = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updatetime().data(), static_cast<int>(this->updatetime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.updateTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->updatetime(), output);
  }

  // optional double fillQty = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->fillqty(), output);
  }

  // optional double fillAvgPrice = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->fillavgprice(), output);
  }

  // optional string lastErrMsg = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasterrmsg().data(), static_cast<int>(this->lasterrmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.lastErrMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->lasterrmsg(), output);
  }

  // optional int32 secMarket = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->secmarket(), output);
  }

  // optional double createTimestamp = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->createtimestamp(), output);
  }

  // optional double updateTimestamp = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->updatetimestamp(), output);
  }

  // optional string remark = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), static_cast<int>(this->remark().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->remark(), output);
  }

  // optional int32 timeInForce = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->timeinforce(), output);
  }

  // optional bool fillOutsideRTH = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->filloutsiderth(), output);
  }

  // optional double auxPrice = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->auxprice(), output);
  }

  // optional int32 trailType = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->trailtype(), output);
  }

  // optional double trailValue = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->trailvalue(), output);
  }

  // optional double trailSpread = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->trailspread(), output);
  }

  // optional int32 currency = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->currency(), output);
  }

  // optional int32 trdMarket = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->trdmarket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.Order)
}

::google::protobuf::uint8* Order::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdSide = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trdside(), target);
  }

  // required int32 orderType = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordertype(), target);
  }

  // required int32 orderStatus = 3;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderstatus(), target);
  }

  // required uint64 orderID = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->orderid(), target);
  }

  // required string orderIDEx = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderidex().data(), static_cast<int>(this->orderidex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.orderIDEx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderidex(), target);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // required string name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // required double qty = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->qty(), target);
  }

  // optional double price = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->price(), target);
  }

  // required string createTime = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), static_cast<int>(this->createtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.createTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->createtime(), target);
  }

  // required string updateTime = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updatetime().data(), static_cast<int>(this->updatetime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.updateTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->updatetime(), target);
  }

  // optional double fillQty = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->fillqty(), target);
  }

  // optional double fillAvgPrice = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->fillavgprice(), target);
  }

  // optional string lastErrMsg = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasterrmsg().data(), static_cast<int>(this->lasterrmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.lastErrMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->lasterrmsg(), target);
  }

  // optional int32 secMarket = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->secmarket(), target);
  }

  // optional double createTimestamp = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->createtimestamp(), target);
  }

  // optional double updateTimestamp = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->updatetimestamp(), target);
  }

  // optional string remark = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), static_cast<int>(this->remark().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.Order.remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->remark(), target);
  }

  // optional int32 timeInForce = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->timeinforce(), target);
  }

  // optional bool fillOutsideRTH = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->filloutsiderth(), target);
  }

  // optional double auxPrice = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->auxprice(), target);
  }

  // optional int32 trailType = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->trailtype(), target);
  }

  // optional double trailValue = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->trailvalue(), target);
  }

  // optional double trailSpread = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->trailspread(), target);
  }

  // optional int32 currency = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->currency(), target);
  }

  // optional int32 trdMarket = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->trdmarket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.Order)
  return target;
}

size_t Order::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.Order)
  size_t total_size = 0;

  if (has_orderidex()) {
    // required string orderIDEx = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderidex());
  }

  if (has_code()) {
    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_name()) {
    // required string name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_createtime()) {
    // required string createTime = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createtime());
  }

  if (has_updatetime()) {
    // required string updateTime = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updatetime());
  }

  if (has_trdside()) {
    // required int32 trdSide = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdside());
  }

  if (has_ordertype()) {
    // required int32 orderType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordertype());
  }

  if (has_orderid()) {
    // required uint64 orderID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orderid());
  }

  if (has_qty()) {
    // required double qty = 8;
    total_size += 1 + 8;
  }

  if (has_orderstatus()) {
    // required int32 orderStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderstatus());
  }

  return total_size;
}
size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.Order)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000179f) ^ 0x0000179f) == 0) {  // All required fields are present.
    // required string orderIDEx = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderidex());

    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string createTime = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createtime());

    // required string updateTime = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updatetime());

    // required int32 trdSide = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdside());

    // required int32 orderType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordertype());

    // required uint64 orderID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orderid());

    // required double qty = 8;
    total_size += 1 + 8;

    // required int32 orderStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional string lastErrMsg = 14;
    if (has_lasterrmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lasterrmsg());
    }

    // optional string remark = 18;
    if (has_remark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  // optional double price = 9;
  if (has_price()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[8 / 32] & 57344u) {
    // optional int32 secMarket = 15;
    if (has_secmarket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secmarket());
    }

    // optional double fillQty = 12;
    if (has_fillqty()) {
      total_size += 1 + 8;
    }

    // optional double fillAvgPrice = 13;
    if (has_fillavgprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double createTimestamp = 16;
    if (has_createtimestamp()) {
      total_size += 2 + 8;
    }

    // optional double updateTimestamp = 17;
    if (has_updatetimestamp()) {
      total_size += 2 + 8;
    }

    // optional int32 timeInForce = 19;
    if (has_timeinforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeinforce());
    }

    // optional bool fillOutsideRTH = 20;
    if (has_filloutsiderth()) {
      total_size += 2 + 1;
    }

    // optional double auxPrice = 21;
    if (has_auxprice()) {
      total_size += 2 + 8;
    }

    // optional double trailValue = 23;
    if (has_trailvalue()) {
      total_size += 2 + 8;
    }

    // optional int32 trailType = 22;
    if (has_trailtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trailtype());
    }

    // optional int32 currency = 25;
    if (has_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional double trailSpread = 24;
    if (has_trailspread()) {
      total_size += 2 + 8;
    }

    // optional int32 trdMarket = 26;
    if (has_trdmarket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trdmarket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Order>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.Order)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderidex();
      orderidex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderidex_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_createtime();
      createtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createtime_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_updatetime();
      updatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatetime_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_lasterrmsg();
      lasterrmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lasterrmsg_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_remark();
      remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remark_);
    }
    if (cached_has_bits & 0x00000080u) {
      trdside_ = from.trdside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00000200u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000400u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00001000u) {
      orderstatus_ = from.orderstatus_;
    }
    if (cached_has_bits & 0x00002000u) {
      secmarket_ = from.secmarket_;
    }
    if (cached_has_bits & 0x00004000u) {
      fillqty_ = from.fillqty_;
    }
    if (cached_has_bits & 0x00008000u) {
      fillavgprice_ = from.fillavgprice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      createtimestamp_ = from.createtimestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      updatetimestamp_ = from.updatetimestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00080000u) {
      filloutsiderth_ = from.filloutsiderth_;
    }
    if (cached_has_bits & 0x00100000u) {
      auxprice_ = from.auxprice_;
    }
    if (cached_has_bits & 0x00200000u) {
      trailvalue_ = from.trailvalue_;
    }
    if (cached_has_bits & 0x00400000u) {
      trailtype_ = from.trailtype_;
    }
    if (cached_has_bits & 0x00800000u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      trailspread_ = from.trailspread_;
    }
    if (cached_has_bits & 0x02000000u) {
      trdmarket_ = from.trdmarket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000179f) != 0x0000179f) return false;
  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  using std::swap;
  orderidex_.Swap(&other->orderidex_);
  code_.Swap(&other->code_);
  name_.Swap(&other->name_);
  createtime_.Swap(&other->createtime_);
  updatetime_.Swap(&other->updatetime_);
  lasterrmsg_.Swap(&other->lasterrmsg_);
  remark_.Swap(&other->remark_);
  swap(trdside_, other->trdside_);
  swap(ordertype_, other->ordertype_);
  swap(orderid_, other->orderid_);
  swap(qty_, other->qty_);
  swap(price_, other->price_);
  swap(orderstatus_, other->orderstatus_);
  swap(secmarket_, other->secmarket_);
  swap(fillqty_, other->fillqty_);
  swap(fillavgprice_, other->fillavgprice_);
  swap(createtimestamp_, other->createtimestamp_);
  swap(updatetimestamp_, other->updatetimestamp_);
  swap(timeinforce_, other->timeinforce_);
  swap(filloutsiderth_, other->filloutsiderth_);
  swap(auxprice_, other->auxprice_);
  swap(trailvalue_, other->trailvalue_);
  swap(trailtype_, other->trailtype_);
  swap(currency_, other->currency_);
  swap(trailspread_, other->trailspread_);
  swap(trdmarket_, other->trdmarket_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderFill::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderFill::kTrdSideFieldNumber;
const int OrderFill::kFillIDFieldNumber;
const int OrderFill::kFillIDExFieldNumber;
const int OrderFill::kOrderIDFieldNumber;
const int OrderFill::kOrderIDExFieldNumber;
const int OrderFill::kCodeFieldNumber;
const int OrderFill::kNameFieldNumber;
const int OrderFill::kQtyFieldNumber;
const int OrderFill::kPriceFieldNumber;
const int OrderFill::kCreateTimeFieldNumber;
const int OrderFill::kCounterBrokerIDFieldNumber;
const int OrderFill::kCounterBrokerNameFieldNumber;
const int OrderFill::kSecMarketFieldNumber;
const int OrderFill::kCreateTimestampFieldNumber;
const int OrderFill::kUpdateTimestampFieldNumber;
const int OrderFill::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderFill::OrderFill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsOrderFill();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.OrderFill)
}
OrderFill::OrderFill(const OrderFill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fillidex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fillidex()) {
    fillidex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fillidex_);
  }
  orderidex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderidex()) {
    orderidex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderidex_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  createtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_createtime()) {
    createtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createtime_);
  }
  counterbrokername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_counterbrokername()) {
    counterbrokername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counterbrokername_);
  }
  ::memcpy(&fillid_, &from.fillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&updatetimestamp_) -
    reinterpret_cast<char*>(&fillid_)) + sizeof(updatetimestamp_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.OrderFill)
}

void OrderFill::SharedCtor() {
  _cached_size_ = 0;
  fillidex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderidex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counterbrokername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatetimestamp_) -
      reinterpret_cast<char*>(&fillid_)) + sizeof(updatetimestamp_));
}

OrderFill::~OrderFill() {
  // @@protoc_insertion_point(destructor:Trd_Common.OrderFill)
  SharedDtor();
}

void OrderFill::SharedDtor() {
  fillidex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderidex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counterbrokername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderFill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderFill::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderFill& OrderFill::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsOrderFill();
  return *internal_default_instance();
}

OrderFill* OrderFill::New(::google::protobuf::Arena* arena) const {
  OrderFill* n = new OrderFill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderFill::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.OrderFill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fillidex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fillidex_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!orderidex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orderidex_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!createtime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*createtime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!counterbrokername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*counterbrokername_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&fillid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderid_) -
        reinterpret_cast<char*>(&fillid_)) + sizeof(orderid_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&trdside_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updatetimestamp_) -
        reinterpret_cast<char*>(&trdside_)) + sizeof(updatetimestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderFill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.OrderFill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trdSide = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trdside();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 fillID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_fillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fillIDEx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fillidex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fillidex().data(), static_cast<int>(this->fillidex().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.OrderFill.fillIDEx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 orderID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_orderid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderIDEx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderidex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderidex().data(), static_cast<int>(this->orderidex().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.OrderFill.orderIDEx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.OrderFill.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.OrderFill.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string createTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), static_cast<int>(this->createtime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.OrderFill.createTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 counterBrokerID = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_counterbrokerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counterbrokerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string counterBrokerName = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counterbrokername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->counterbrokername().data(), static_cast<int>(this->counterbrokername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.OrderFill.counterBrokerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 secMarket = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_secmarket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double createTimestamp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_createtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &createtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double updateTimestamp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_updatetimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &updatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.OrderFill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.OrderFill)
  return false;
#undef DO_
}

void OrderFill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.OrderFill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdSide = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trdside(), output);
  }

  // required uint64 fillID = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fillid(), output);
  }

  // required string fillIDEx = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fillidex().data(), static_cast<int>(this->fillidex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.fillIDEx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fillidex(), output);
  }

  // optional uint64 orderID = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->orderid(), output);
  }

  // optional string orderIDEx = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderidex().data(), static_cast<int>(this->orderidex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.orderIDEx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderidex(), output);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // required string name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // required double qty = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->qty(), output);
  }

  // required double price = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->price(), output);
  }

  // required string createTime = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), static_cast<int>(this->createtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.createTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->createtime(), output);
  }

  // optional int32 counterBrokerID = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->counterbrokerid(), output);
  }

  // optional string counterBrokerName = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counterbrokername().data(), static_cast<int>(this->counterbrokername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.counterBrokerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->counterbrokername(), output);
  }

  // optional int32 secMarket = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->secmarket(), output);
  }

  // optional double createTimestamp = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->createtimestamp(), output);
  }

  // optional double updateTimestamp = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->updatetimestamp(), output);
  }

  // optional int32 status = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.OrderFill)
}

::google::protobuf::uint8* OrderFill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.OrderFill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trdSide = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trdside(), target);
  }

  // required uint64 fillID = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fillid(), target);
  }

  // required string fillIDEx = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fillidex().data(), static_cast<int>(this->fillidex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.fillIDEx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fillidex(), target);
  }

  // optional uint64 orderID = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->orderid(), target);
  }

  // optional string orderIDEx = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderidex().data(), static_cast<int>(this->orderidex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.orderIDEx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderidex(), target);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // required string name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // required double qty = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->qty(), target);
  }

  // required double price = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->price(), target);
  }

  // required string createTime = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), static_cast<int>(this->createtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.createTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->createtime(), target);
  }

  // optional int32 counterBrokerID = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->counterbrokerid(), target);
  }

  // optional string counterBrokerName = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counterbrokername().data(), static_cast<int>(this->counterbrokername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.OrderFill.counterBrokerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->counterbrokername(), target);
  }

  // optional int32 secMarket = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->secmarket(), target);
  }

  // optional double createTimestamp = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->createtimestamp(), target);
  }

  // optional double updateTimestamp = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->updatetimestamp(), target);
  }

  // optional int32 status = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.OrderFill)
  return target;
}

size_t OrderFill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.OrderFill)
  size_t total_size = 0;

  if (has_fillidex()) {
    // required string fillIDEx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fillidex());
  }

  if (has_code()) {
    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_name()) {
    // required string name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_createtime()) {
    // required string createTime = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createtime());
  }

  if (has_fillid()) {
    // required uint64 fillID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fillid());
  }

  if (has_trdside()) {
    // required int32 trdSide = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdside());
  }

  if (has_qty()) {
    // required double qty = 8;
    total_size += 1 + 8;
  }

  if (has_price()) {
    // required double price = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t OrderFill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.OrderFill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000d5d) ^ 0x00000d5d) == 0) {  // All required fields are present.
    // required string fillIDEx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fillidex());

    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string createTime = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createtime());

    // required uint64 fillID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fillid());

    // required int32 trdSide = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trdside());

    // required double qty = 8;
    total_size += 1 + 8;

    // required double price = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string orderIDEx = 5;
  if (has_orderidex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderidex());
  }

  // optional string counterBrokerName = 12;
  if (has_counterbrokername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->counterbrokername());
  }

  // optional uint64 orderID = 4;
  if (has_orderid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orderid());
  }

  // optional int32 counterBrokerID = 11;
  if (has_counterbrokerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->counterbrokerid());
  }

  if (_has_bits_[8 / 32] & 61440u) {
    // optional double createTimestamp = 14;
    if (has_createtimestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 secMarket = 13;
    if (has_secmarket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secmarket());
    }

    // optional int32 status = 16;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional double updateTimestamp = 15;
    if (has_updatetimestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderFill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.OrderFill)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderFill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderFill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.OrderFill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.OrderFill)
    MergeFrom(*source);
  }
}

void OrderFill::MergeFrom(const OrderFill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.OrderFill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fillidex();
      fillidex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fillidex_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderidex();
      orderidex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderidex_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_createtime();
      createtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createtime_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_counterbrokername();
      counterbrokername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counterbrokername_);
    }
    if (cached_has_bits & 0x00000040u) {
      fillid_ = from.fillid_;
    }
    if (cached_has_bits & 0x00000080u) {
      orderid_ = from.orderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      trdside_ = from.trdside_;
    }
    if (cached_has_bits & 0x00000200u) {
      counterbrokerid_ = from.counterbrokerid_;
    }
    if (cached_has_bits & 0x00000400u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00001000u) {
      createtimestamp_ = from.createtimestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      secmarket_ = from.secmarket_;
    }
    if (cached_has_bits & 0x00004000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00008000u) {
      updatetimestamp_ = from.updatetimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderFill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.OrderFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderFill::CopyFrom(const OrderFill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.OrderFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000d5d) != 0x00000d5d) return false;
  return true;
}

void OrderFill::Swap(OrderFill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderFill::InternalSwap(OrderFill* other) {
  using std::swap;
  fillidex_.Swap(&other->fillidex_);
  orderidex_.Swap(&other->orderidex_);
  code_.Swap(&other->code_);
  name_.Swap(&other->name_);
  createtime_.Swap(&other->createtime_);
  counterbrokername_.Swap(&other->counterbrokername_);
  swap(fillid_, other->fillid_);
  swap(orderid_, other->orderid_);
  swap(trdside_, other->trdside_);
  swap(counterbrokerid_, other->counterbrokerid_);
  swap(qty_, other->qty_);
  swap(price_, other->price_);
  swap(createtimestamp_, other->createtimestamp_);
  swap(secmarket_, other->secmarket_);
  swap(status_, other->status_);
  swap(updatetimestamp_, other->updatetimestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderFill::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaxTrdQtys::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaxTrdQtys::kMaxCashBuyFieldNumber;
const int MaxTrdQtys::kMaxCashAndMarginBuyFieldNumber;
const int MaxTrdQtys::kMaxPositionSellFieldNumber;
const int MaxTrdQtys::kMaxSellShortFieldNumber;
const int MaxTrdQtys::kMaxBuyBackFieldNumber;
const int MaxTrdQtys::kLongRequiredIMFieldNumber;
const int MaxTrdQtys::kShortRequiredIMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaxTrdQtys::MaxTrdQtys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsMaxTrdQtys();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.MaxTrdQtys)
}
MaxTrdQtys::MaxTrdQtys(const MaxTrdQtys& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxcashbuy_, &from.maxcashbuy_,
    static_cast<size_t>(reinterpret_cast<char*>(&shortrequiredim_) -
    reinterpret_cast<char*>(&maxcashbuy_)) + sizeof(shortrequiredim_));
  // @@protoc_insertion_point(copy_constructor:Trd_Common.MaxTrdQtys)
}

void MaxTrdQtys::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maxcashbuy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shortrequiredim_) -
      reinterpret_cast<char*>(&maxcashbuy_)) + sizeof(shortrequiredim_));
}

MaxTrdQtys::~MaxTrdQtys() {
  // @@protoc_insertion_point(destructor:Trd_Common.MaxTrdQtys)
  SharedDtor();
}

void MaxTrdQtys::SharedDtor() {
}

void MaxTrdQtys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxTrdQtys::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaxTrdQtys& MaxTrdQtys::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsMaxTrdQtys();
  return *internal_default_instance();
}

MaxTrdQtys* MaxTrdQtys::New(::google::protobuf::Arena* arena) const {
  MaxTrdQtys* n = new MaxTrdQtys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaxTrdQtys::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.MaxTrdQtys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&maxcashbuy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shortrequiredim_) -
        reinterpret_cast<char*>(&maxcashbuy_)) + sizeof(shortrequiredim_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaxTrdQtys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.MaxTrdQtys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double maxCashBuy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_maxcashbuy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxcashbuy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maxCashAndMarginBuy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_maxcashandmarginbuy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxcashandmarginbuy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double maxPositionSell = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_maxpositionsell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxpositionsell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maxSellShort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_maxsellshort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxsellshort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maxBuyBack = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_maxbuyback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxbuyback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longRequiredIM = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_longrequiredim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longrequiredim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double shortRequiredIM = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_shortrequiredim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortrequiredim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.MaxTrdQtys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.MaxTrdQtys)
  return false;
#undef DO_
}

void MaxTrdQtys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.MaxTrdQtys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double maxCashBuy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->maxcashbuy(), output);
  }

  // optional double maxCashAndMarginBuy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxcashandmarginbuy(), output);
  }

  // required double maxPositionSell = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maxpositionsell(), output);
  }

  // optional double maxSellShort = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxsellshort(), output);
  }

  // optional double maxBuyBack = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxbuyback(), output);
  }

  // optional double longRequiredIM = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longrequiredim(), output);
  }

  // optional double shortRequiredIM = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->shortrequiredim(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.MaxTrdQtys)
}

::google::protobuf::uint8* MaxTrdQtys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.MaxTrdQtys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double maxCashBuy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->maxcashbuy(), target);
  }

  // optional double maxCashAndMarginBuy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxcashandmarginbuy(), target);
  }

  // required double maxPositionSell = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maxpositionsell(), target);
  }

  // optional double maxSellShort = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxsellshort(), target);
  }

  // optional double maxBuyBack = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxbuyback(), target);
  }

  // optional double longRequiredIM = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longrequiredim(), target);
  }

  // optional double shortRequiredIM = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->shortrequiredim(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.MaxTrdQtys)
  return target;
}

size_t MaxTrdQtys::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Trd_Common.MaxTrdQtys)
  size_t total_size = 0;

  if (has_maxcashbuy()) {
    // required double maxCashBuy = 1;
    total_size += 1 + 8;
  }

  if (has_maxpositionsell()) {
    // required double maxPositionSell = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t MaxTrdQtys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.MaxTrdQtys)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required double maxCashBuy = 1;
    total_size += 1 + 8;

    // required double maxPositionSell = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double maxCashAndMarginBuy = 2;
  if (has_maxcashandmarginbuy()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional double maxSellShort = 4;
    if (has_maxsellshort()) {
      total_size += 1 + 8;
    }

    // optional double maxBuyBack = 5;
    if (has_maxbuyback()) {
      total_size += 1 + 8;
    }

    // optional double longRequiredIM = 6;
    if (has_longrequiredim()) {
      total_size += 1 + 8;
    }

    // optional double shortRequiredIM = 7;
    if (has_shortrequiredim()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxTrdQtys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.MaxTrdQtys)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxTrdQtys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaxTrdQtys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.MaxTrdQtys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.MaxTrdQtys)
    MergeFrom(*source);
  }
}

void MaxTrdQtys::MergeFrom(const MaxTrdQtys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.MaxTrdQtys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      maxcashbuy_ = from.maxcashbuy_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxcashandmarginbuy_ = from.maxcashandmarginbuy_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxpositionsell_ = from.maxpositionsell_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxsellshort_ = from.maxsellshort_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxbuyback_ = from.maxbuyback_;
    }
    if (cached_has_bits & 0x00000020u) {
      longrequiredim_ = from.longrequiredim_;
    }
    if (cached_has_bits & 0x00000040u) {
      shortrequiredim_ = from.shortrequiredim_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaxTrdQtys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.MaxTrdQtys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxTrdQtys::CopyFrom(const MaxTrdQtys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.MaxTrdQtys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxTrdQtys::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void MaxTrdQtys::Swap(MaxTrdQtys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaxTrdQtys::InternalSwap(MaxTrdQtys* other) {
  using std::swap;
  swap(maxcashbuy_, other->maxcashbuy_);
  swap(maxcashandmarginbuy_, other->maxcashandmarginbuy_);
  swap(maxpositionsell_, other->maxpositionsell_);
  swap(maxsellshort_, other->maxsellshort_);
  swap(maxbuyback_, other->maxbuyback_);
  swap(longrequiredim_, other->longrequiredim_);
  swap(shortrequiredim_, other->shortrequiredim_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaxTrdQtys::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrdFilterConditions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrdFilterConditions::kCodeListFieldNumber;
const int TrdFilterConditions::kIdListFieldNumber;
const int TrdFilterConditions::kBeginTimeFieldNumber;
const int TrdFilterConditions::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrdFilterConditions::TrdFilterConditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdFilterConditions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trd_Common.TrdFilterConditions)
}
TrdFilterConditions::TrdFilterConditions(const TrdFilterConditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      codelist_(from.codelist_),
      idlist_(from.idlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  begintime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_begintime()) {
    begintime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begintime_);
  }
  endtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_endtime()) {
    endtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endtime_);
  }
  // @@protoc_insertion_point(copy_constructor:Trd_Common.TrdFilterConditions)
}

void TrdFilterConditions::SharedCtor() {
  _cached_size_ = 0;
  begintime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TrdFilterConditions::~TrdFilterConditions() {
  // @@protoc_insertion_point(destructor:Trd_Common.TrdFilterConditions)
  SharedDtor();
}

void TrdFilterConditions::SharedDtor() {
  begintime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrdFilterConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrdFilterConditions::descriptor() {
  ::protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrdFilterConditions& TrdFilterConditions::default_instance() {
  ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdFilterConditions();
  return *internal_default_instance();
}

TrdFilterConditions* TrdFilterConditions::New(::google::protobuf::Arena* arena) const {
  TrdFilterConditions* n = new TrdFilterConditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrdFilterConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:Trd_Common.TrdFilterConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codelist_.Clear();
  idlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!begintime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*begintime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!endtime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*endtime_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrdFilterConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trd_Common.TrdFilterConditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string codeList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_codelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codelist(this->codelist_size() - 1).data(),
            static_cast<int>(this->codelist(this->codelist_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.TrdFilterConditions.codeList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 idList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_idlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string beginTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begintime().data(), static_cast<int>(this->begintime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.TrdFilterConditions.beginTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string endTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), static_cast<int>(this->endtime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Trd_Common.TrdFilterConditions.endTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trd_Common.TrdFilterConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trd_Common.TrdFilterConditions)
  return false;
#undef DO_
}

void TrdFilterConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trd_Common.TrdFilterConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codeList = 1;
  for (int i = 0, n = this->codelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codelist(i).data(), static_cast<int>(this->codelist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdFilterConditions.codeList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->codelist(i), output);
  }

  // repeated uint64 idList = 2;
  for (int i = 0, n = this->idlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->idlist(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string beginTime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), static_cast<int>(this->begintime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdFilterConditions.beginTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->begintime(), output);
  }

  // optional string endTime = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), static_cast<int>(this->endtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdFilterConditions.endTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Trd_Common.TrdFilterConditions)
}

::google::protobuf::uint8* TrdFilterConditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Trd_Common.TrdFilterConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codeList = 1;
  for (int i = 0, n = this->codelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codelist(i).data(), static_cast<int>(this->codelist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdFilterConditions.codeList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->codelist(i), target);
  }

  // repeated uint64 idList = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->idlist_, target);

  cached_has_bits = _has_bits_[0];
  // optional string beginTime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), static_cast<int>(this->begintime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdFilterConditions.beginTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->begintime(), target);
  }

  // optional string endTime = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), static_cast<int>(this->endtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Trd_Common.TrdFilterConditions.endTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trd_Common.TrdFilterConditions)
  return target;
}

size_t TrdFilterConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trd_Common.TrdFilterConditions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string codeList = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->codelist_size());
  for (int i = 0, n = this->codelist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->codelist(i));
  }

  // repeated uint64 idList = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->idlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->idlist_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string beginTime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrdFilterConditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trd_Common.TrdFilterConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrdFilterConditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrdFilterConditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trd_Common.TrdFilterConditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trd_Common.TrdFilterConditions)
    MergeFrom(*source);
  }
}

void TrdFilterConditions::MergeFrom(const TrdFilterConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trd_Common.TrdFilterConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codelist_.MergeFrom(from.codelist_);
  idlist_.MergeFrom(from.idlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_begintime();
      begintime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begintime_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_endtime();
      endtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endtime_);
    }
  }
}

void TrdFilterConditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trd_Common.TrdFilterConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrdFilterConditions::CopyFrom(const TrdFilterConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trd_Common.TrdFilterConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrdFilterConditions::IsInitialized() const {
  return true;
}

void TrdFilterConditions::Swap(TrdFilterConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrdFilterConditions::InternalSwap(TrdFilterConditions* other) {
  using std::swap;
  codelist_.InternalSwap(&other->codelist_);
  idlist_.InternalSwap(&other->idlist_);
  begintime_.Swap(&other->begintime_);
  endtime_.Swap(&other->endtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrdFilterConditions::GetMetadata() const {
  protobuf_Trd_5fCommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Trd_5fCommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Trd_Common

// @@protoc_insertion_point(global_scope)
